(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{529:function(e,t,n){"use strict";n.r(t);var a=n(4),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[e._v("#")]),e._v(" 简介")]),e._v(" "),n("blockquote",[n("p",[e._v("静态类型,弱类型的语言，完全兼容JS")])]),e._v(" "),n("blockquote",[n("p",[e._v("全局安装TS")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("npm install -g typescript\n全局安装 tsc 命令,全局执行 tsc命令\n")])])]),n("h2",{attrs:{id:"基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[e._v("#")]),e._v(" 基础")]),e._v(" "),n("h3",{attrs:{id:"数据类型-原始数据类型和对象数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据类型-原始数据类型和对象数据类型"}},[e._v("#")]),e._v(" 数据类型(原始数据类型和对象数据类型)")]),e._v(" "),n("blockquote",[n("p",[e._v("布尔值")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("TS: let isDone: boolean = true;\nJS: let isDone = true;\n")])])]),n("blockquote",[n("p",[e._v("数值")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("TS: let isDone: number = 1;\nJS: let isDone = 1;\n")])])]),n("blockquote",[n("p",[e._v("字符串")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("TS: let isDone: string = '1nian';\nJS: let isDone = '1nian'\n")])])]),n("blockquote",[n("p",[e._v("空值(Void)")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v(" js 中没有空值 (Void)\n functon changeVoid(): void{\n    alert('void-空值');\n }\n")])])]),n("blockquote",[n("p",[e._v("Symbol")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("  TS: Const sym = Symbol();\n  let obj = {\n    [sym]:'1nian'\n  };\n  console.log(obj[sym]);  // 1nian\n")])])]),n("blockquote",[n("p",[e._v("Array")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("  TS: let list: number[] = [1,2,3];\n  JS: let list = [1,2,3]\n  \n  TS: let list: Array<number> = [1,2,3];  Array<number>泛型语法\n  JS: let list = [1,2,3];\n")])])]),n("blockquote",[n("p",[e._v("Any")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("  在 TypeScript 中任何类型都可以被规为 Any 类型；Any 类型的值可以执行任何操作\n")])])]),n("blockquote",[n("p",[e._v("Unknown")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("通过将 any 类型改变为 unknown 类型，我们已将允许所有更改的默认设置，更改为禁止任何更改  \n")])])]),n("blockquote",[n("p",[e._v("Tuple (元组)")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("元组可用于定义具有有限数量的未命名属性的类型。每个属性都有一个关联的类型。使用元组时，必须提供每个属性的值。\n\nlet tupleType: [string,boolean];\ntupleType = ['1nian',true];\n\nconsole.log(tupleType[0]);  //  1nian \nconsole.log(tupleType[1]);  //  true\n\n在元组初始化中，类型必须匹配，每个属性的值必须提供\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);